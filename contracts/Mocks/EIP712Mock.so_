// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol";

contract EIP712Mock is EIP712 {

    string private name;
    string private version;

    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;
    uint256 private immutable _CACHED_CHAIN_ID;
    address private immutable _CACHED_THIS;

    bytes32 private immutable _HASHED_NAME;
    bytes32 private immutable _HASHED_VERSION;
    bytes32 private immutable _TYPE_HASH;

    constructor(string memory _name, string memory _version) EIP712(_name, _version)  {
        name = _name;
        version = _version;
        bytes32 hashedName = keccak256(bytes(name));
        bytes32 hashedVersion = keccak256(bytes(version));
        bytes32 typeHash = keccak256(
            "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
        );
        _HASHED_NAME = hashedName;
        _HASHED_VERSION = hashedVersion;
        _CACHED_CHAIN_ID = block.chainid;
        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator_2(typeHash, hashedName, hashedVersion);
        _CACHED_THIS = address(this);
        _TYPE_HASH = typeHash;
    }

    function expose_domainSeparatorV4() public view returns (bytes32) {
        return _domainSeparatorV4();
    }

    function expose_name_hash() public view returns (bytes32) {
        return _HASHED_NAME;
    }

    function expose_version_hash() public view returns (bytes32) {
        return _HASHED_VERSION;
    }

    function expose_type_hash() public view returns (bytes32) {
        return _TYPE_HASH;
    }

    function expose_chainid() public view returns (uint256){
        return block.chainid;
    }

    function expose_chainid_abi() public view returns (bytes memory){
        return abi.encode(block.chainid);
    }

    function expose_address() public view returns (address){
        return address(this);
    }

    function expose_abiencode() public view returns (bytes memory){
        return abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, block.chainid, address(this));
    }

    function expose_cached_domain() public view returns (bytes32){
        return _CACHED_DOMAIN_SEPARATOR;
    }

    function _buildDomainSeparator_2(
        bytes32 typeHash,
        bytes32 nameHash,
        bytes32 versionHash
    ) private view returns (bytes32) {
        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));
    }
    
}